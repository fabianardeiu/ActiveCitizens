// <auto-generated />
using System;
using ActiveCitizens.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ActiveCitizens.Core.Migrations
{
    [DbContext(typeof(ActiveCitizensContext))]
    [Migration("20200429152304_AddedNewMarkerId")]
    partial class AddedNewMarkerId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ActiveCitizens.Models.Citizen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Citizens");
                });

            modelBuilder.Entity("ActiveCitizens.Models.Marker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByCitizenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ResolvedByCitizenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Solved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByCitizenId");

                    b.HasIndex("ResolvedByCitizenId");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("ActiveCitizens.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ActiveCitizens.Models.Citizen", b =>
                {
                    b.HasOne("ActiveCitizens.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveCitizens.Models.Marker", b =>
                {
                    b.HasOne("ActiveCitizens.Models.Citizen", "CreatedByCitizen")
                        .WithMany("CreatedMarkers")
                        .HasForeignKey("CreatedByCitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActiveCitizens.Models.Citizen", "ResolvedByCitizen")
                        .WithMany("ResolvedMarkers")
                        .HasForeignKey("ResolvedByCitizenId");
                });
#pragma warning restore 612, 618
        }
    }
}
